dir
dir()
install.packages(swirl)
install.packages("swirl")
library("swirl")
swirl()
clc
quit()
cls
clc
clear()
cls()
x <- as.Date("1970-01-01")
x
x <- as.Date("1970-01-01")
x
attributes(x)
unclass(x)
unclass(as.Date(x))
unclass(as.Date("1970-01-02"))
x <- Sys.time()
x
p <- as.POSIXct(x)
name(p)
name(unclass(p))
names(unclass(p))
name(p)
names(p)
p <- as.POSIXlt(x)
p <- as.POSIXct(x)
p <- as.POSIXlt(x)
names(unclass(p))
names(p)
attributes(p)
p$sec
x
unclass(x)
x$sec
datestring <- c("January 10, 2012 10:40","December 9,2011 9:10")
datestring
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
datestring
swirl()
library(swirl)
library("swirl")
install.packages("swirl")
library("swirl")
swirl()
install.packages("swirl")
rm(list = ls())
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
f
split(x, f)
lapply(split(x, f), mean)
x <- norm(10)
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
interaction(f1, f2)
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2)), drop = TRUE)
log(-1)
printmessage <- function(x){
if (x> 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
}
printmessage(4)
printmessage(-2)
printmessage <- function(x){
if (x> 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage <- function(x){
if (x> 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(-2)
printmessage(NA)
printmessage2 <- function(x){
if(is.na(x))
print("x is a missing value")
else if (x> 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
x <- log(-1)
printmessage2(x)
printmessage2 <- function(x){
if(is.na(x))
print("x is a missing value!")
else if (x> 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage2(x)
mean(x)
traceback()
rm(list = ls())
mean(x)
traceback()
lm(y ~ x)
traceback()
debug(lm)
lm(y ~ x)
options(error = recover)
read.csv("nonsuchfile")
library(swirl)
swirl()
q
info()
main()
main()
head(flags)
dim(flags)
View(flags)
class(flags)
cls <- lapply(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect(sapply(flags, class))
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
fla_colors <- flag[,11:17]
flag_colors <- flag[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
View(shape_mat)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 6, 6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flgas, unique, numeric(1))
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
flags$landmass
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
swirl()
swirl()
library(swirl)
swirl()
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris$Sepal.Length,iris$Species, mean)
apply(iris, 1, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
tapply(iris$Sepal.Length,iris$Species, mean)
saply(iris,mean)
sapply(iris,mean)
sapply(iris[, 1:4],mean)
sapply(iris[, 1:4],mean)
?apply
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,avg)
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$mpg,mtcars$cyl,average)
tapply(mtcars$mpg,mtcars$cyl,mean)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
head(mtcars)
HP_mean <- tapply(mtcars$hp, mtcars$cyl, mean)
hp_mean
HP_mean
HP_mean(3)-HP_mean(1)
HP_mean[3]-HP_mean[1]
debug(ls)
debug(ls)
ls
debug(ls)
ls()
HP_mean
rm(list = ls())
library(swirl)
swirl()
quit
quit()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(1:2, 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(0:1, 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0,7)
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n = 1, 100, prob = 0.7)
flips2 <- rbinom(n = 100, 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100, 100, 25)
rnorm(100, mean = 100, sd = 25)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main("My Plot"))
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
head(mtcars)
dim(mtcars)
str(mtcars)
summary(mtcars)
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
swirl()
library(swirl)
swirl()
setwd("~/Estudos/Machine Learning/R-Programming/Week4")
rm(list = ls())
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
str(outcome)
summary(outcome)
colnames(outcome)
ncol(outcome)
names(outcome)
outcome[,11] <- as.numeric(outcome[ ,11])
hist(outcome[,11])
names(outcome[,11])
colnames(outcome[,11])
names(outcome)[11]
